(defun isPrime (n)
    (if (eq n 2)
        (return-from isPrime t)
    )
    (if (eq (mod n 2) 0)
        (return-from isPrime nil)
    )
    (let ((maxVal (sqrt n)))
        (loop for i from 3 to maxVal do
            (if (eq (mod n i) 0)
                (return-from isPrime nil)
            )
        )
    )
    (return-from isPrime t)
)

(defun factors (n)
    (let ((f '(1)))
        (loop for i from 2 to n do
            (if (eq (mod n i) 0)
                (push i f)
            )
        )
        (return-from factors f)
    )
)

(defun writeNumberInfo (n)
    (write-line (concatenate 'string "The number is: " (write-to-string n)))
    (if (eq (mod n 2) 0)
        (write-line "The number is even")
        (write-line "The number is odd")
    )
    (if (isPrime n)
        (write-line "The number is prime")
        (write-line "The number is not prime")
    )
    (let* ((f (factors n)) (fSum (- (reduce #'+ f) n)))
        (write-line (concatenate 'string "The factors are: " (format nil "~{~A~^, ~}" f)))
        (cond
            ((> fSum n) (write-line "The number is abundant"))
            ((= fSum n) (write-line "The number is perfect"))
            ((< fSum n) (write-line "The number is deficient"))
        )
    )
)
